# import all the modules
from tkinter import *
from tkinter import ttk
import sqlite3
import tkinter.messagebox
import datetime
import os
import random
import re
import csv
import numpy as np
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,
NavigationToolbar2Tk)



conn = sqlite3.connect("C:\\Users\\Tejaswini\\Downloads\\shop ms\\1mart.db")
c = conn.cursor()
conn.commit()
# date
date = datetime.datetime.now().date()


def show_frame(frame):
    frame.tkraise()


root = Tk()
root.geometry("1366x768+0+0")
root.title("Store management System")
root.title("KJ Mart-Store management System")
root.resizable(width=False, height=False)
root.rowconfigure(0, weight=1)
root.columnconfigure(0, weight=1)
frame1 = tkinter.Frame(root)
frame11= tkinter.Frame(root, bg="orange")
frame2 = tkinter.Frame(root)
frame3 = tkinter.Frame(root)
frame4 = tkinter.Frame(root, bg="orange")
frame5 = tkinter.Frame(root)
frame6 = tkinter.Frame(root)
frame7 = tkinter.Frame(root, bg="orange")
frame8 = tkinter.Frame(root, bg="orange")
for frame in (frame1, frame2, frame3, frame4, frame5,frame11,frame6,frame7,frame8):
    frame.grid(row=0, column=0, sticky='nsew')
# --------------------------------------------Main window----------------------------------------
# temporary lists like sessions
products_list = []
product_price = []
product_quantity = []
product_id = []
# list for labels
labels_list = []
my_list=[]

# all functions
def change_func():
    global c_amount
    c_amount.configure(text="")
    # get the amount given by the customer and the amount generated by the computer
    amount_given = float(change_e.get())
    our_total = float(sum(product_price))
    to_give = amount_given - our_total
    p = "Change: Rs. " + str(to_give)
    # label change
    c_amount = Label(left, text=p,
                     font=('arial 18 bold'), fg='red', bg='floral white')
    c_amount.place(x=0, y=600)


def display_analysis_results(results, frequent_items, min_support, frame):
    # Clear any existing content in frame
    for widget in frame5.winfo_children():
        widget.destroy()

    # Create labels and summary of Apriori output
    label = Label(frame5, text="Apriori Analysis Results:")
    label.pack()

    summary_text = f"Minimum Support: {min_support}\n"
    summary_text += f"Number of Frequent Itemsets: {len(frequent_items)}\n"
    summary_text += f"Number of Association Rules: {len(results)}\n"
    summary_label = Label(frame5, text=summary_text)
    summary_label.pack()

    # Display frequent itemsets
    itemsets_label = Label(frame5, text="Frequent Itemsets:")
    itemsets_label.pack()

    itemsets_table = ttk.Treeview(frame5, columns=("items", "support"), show="headings")
    itemsets_table.column("items", width=300)
    itemsets_table.column("support", width=100)
    itemsets_table.heading("items", text="Items")
    itemsets_table.heading("support", text="Support")

    for i, row in frequent_items.iterrows():
        items = ", ".join(row["itemsets"])
        support = row["support"]
        itemsets_table.insert("", i, values=(items, support))
    itemsets_table.pack()

    # Separator
    separator = ttk.Separator(frame5, orient='horizontal')
    separator.pack(fill='both', pady=10)

    # Display association rules
    rule_label = Label(frame5, text="Association Rules:")
    rule_label.pack()

    table = ttk.Treeview(frame5, columns=("antecedents", "consequents", "lift", "confidence", "support", "leverage", "zhangs_metric"), show="headings")

    # Set column widths
    table.column("antecedents", width=150)
    table.column("consequents", width=150)
    table.column("lift", width=100)
    table.column("confidence", width=100)
    table.column("support", width=100)
    table.column("leverage", width=100)
    table.column("zhangs_metric", width=100)

    # Set column headings
    table.heading("antecedents", text="Antecedents")
    table.heading("consequents", text="Consequents")
    table.heading("lift", text="Lift")
    table.heading("confidence", text="Confidence")
    table.heading("support", text="Support")
    table.heading("leverage", text="Leverage")
    table.heading("zhangs_metric", text="Zhang's Metric")

    # Insert data into the table
    for i, row in results.iterrows():
        antecedents = ", ".join(row["antecedents"])
        consequents = ", ".join(row["consequents"])
        lift = row["lift"]
        confidence = row["confidence"]
        support = row["support"]
        leverage = row["leverage"]
        zhangs_metric = row["zhangs_metric"]
        table.insert("", i, values=(antecedents, consequents, lift, confidence, support, leverage, zhangs_metric))
    table.pack()


    close_button = ttk.Button(frame5, text="Close", command=lambda: show_frame(frame11))
    close_button.pack()



def analysis(frame):
    data = pd.read_csv('C:\\Users\\Tejaswini\\Downloads\\shop ms\\final2.csv')
    data['product'] = data['product'].str.strip()

    basket_France = (data
                     .groupby(['bill', 'product'])['quantity']
                     .sum().unstack().reset_index().fillna(0)
                     .set_index('bill'))

    def hot_encode(x):
        return 0 if x <= 0 else 1

    # Encoding the datasets
    basket_encoded = basket_France.map(hot_encode)
    basket_France = basket_encoded

    # Building the model
    frq_items = apriori(basket_France, min_support=0.05, use_colnames=True)

    # Collecting the inferred rules
    rules = association_rules(frq_items, metric="lift", min_threshold=1)
    rules = rules.sort_values(['confidence', 'lift'], ascending=[False, False])
    close_button = ttk.Button(frame5, text="Close", command=lambda: show_frame(frame11))
    close_button.pack()

    # Display results in frame (assuming frame is a Tkinter frame)
    display_analysis_results(rules, frq_items, 0.05, frame5)


import pandas as pd
import matplotlib.pyplot as plt
from mlxtend.frequent_patterns import apriori, association_rules
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter as tk
from tkinter import ttk


def bar(frame):
    data = pd.read_csv('C:\\Users\\Tejaswini\\Downloads\\shop ms\\final2.csv')
    data['product'] = data['product'].str.strip()

    basket_France = (data
                     .groupby(['bill', 'product'])['quantity']
                     .sum().unstack().reset_index().fillna(0)
                     .set_index('bill'))

    def hot_encode(x):
        return 0 if x <= 0 else 1

    # Encoding the datasets
    basket_encoded = basket_France.applymap(hot_encode)
    basket_France = basket_encoded

    # Building the model
    frq_items = apriori(basket_France, min_support=0.05, use_colnames=True)

    # Collecting the inferred rules
    rules = association_rules(frq_items, metric="lift", min_threshold=1)
    rules = rules.sort_values(['conviction'], ascending=False)

    # Preparing antecedents for plotting
    rules['antecedents'] = rules['antecedents'].apply(lambda x: ', '.join(list(x)))

    # Creating the bar plot
    fig, ax = plt.subplots(figsize=(8, 6))
    rules.plot(kind='bar', x='antecedents', y='conviction', ax=ax, color='skyblue', alpha=0.7)

    ax.set_title('Antecedents vs Conviction')
    ax.set_xlabel('Antecedents')
    ax.set_ylabel('Conviction')
    ax.tick_params(axis='x', rotation=90)  # Rotate x labels for better readability

    # Embed the plot in Tkinter
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack()
    close_button = ttk.Button(frame, text="Close", command=lambda: show_frame(frame11))
    close_button.pack()



def ownpas(U2name,Passwd2):
    with open("C:\\Users\\Tejaswini\\Downloads\\o1.txt",'r') as f11:
        user2=f11.read()
    with open("C:\\Users\\Tejaswini\\Downloads\\o2.txt",'r') as f22:
        pass2=f22.read()
    reg = "^(?=.[a-z])(?=.[A-Z])(?=.\d)(?=.[@$!%#?&])[A-Za-z\d@$!#%?&]{6,20}$"
    pat = re.compile(reg)

    # searching regex
    mat = re.search(pat, Passwd2)

    if U2name == user2 and Passwd2 == pass2:
        tkinter.messagebox.showinfo(
            "Error", "Give different username and password")
        Uname2_e.delete(0, END)
        Passwd2_e.delete(0, END)


    elif mat:
        with open("C:\\Users\\Tejaswini\\Downloads\\o1.txt", 'w') as f11:
            f11.write(U2name)
        with open("C:\\Users\\Tejaswini\\Downloads\\o2.txt", 'w') as f22:
            f22.write(Passwd2)
        tkinter.messagebox.showinfo(
            "done", "your username and password are successfully updated")
        Uname2_e.delete(0, END)
        Passwd2_e.delete(0, END)

    else:
        tkinter.messagebox.showinfo(
            "Error", "Password cannot have spaces")
        Uname2_e.delete(0, END)
        Passwd2_e.delete(0, END)




def emppas(Uname3, Passwd3):
    with open("C:\\Users\\Tejaswini\\Downloads\\e1.txt", 'r') as f33:
        user3 = f33.read()
    with open("C:\\Users\\Tejaswini\\Downloads\\e2.txt", 'r') as f44:
        passw3 = f44.read()
    reg = "^(?=.[a-z])(?=.[A-Z])(?=.\d)(?=.[@$!%#?&])[A-Za-z\d@$!#%?&]{6,20}$"
    pat = re.compile(reg)

    # searching regex
    mat1 = re.search(pat, Passwd3)
    if Uname3 == user3 and Passwd3 == passw3:
        tkinter.messagebox.showinfo(
            "Error", "Give different username and password")



        Uname3_e.delete(0, END)
        Passwd3_e.delete(0, END)



    elif mat1:
        with open("C:\\Users\\Tejaswini\\Downloads\\e1.txt", 'w') as f33:
            f33.write(Uname3)
        with open("C:\\Users\\Tejaswini\\Downloads\\e2.txt", 'w') as f44:
            f44.write(Passwd3)
        tkinter.messagebox.showinfo(
            "done", "your username and password are successfully updated")
        Uname2_e.delete(0, END)
        Passwd2_e.delete(0, END)
    else:
        tkinter.messagebox.showinfo(
            "Error", "Give different username and password")
        Uname3_e.delete(0, END)
        Passwd3_e.delete(0, END)




def ajax():
    global get_id, get_name, get_price, get_stock
    get_id = enteride.get()
    get_price = "NA"
    get_name = "Does not exist"
    # get the products info with that id and fill it in the labels above
    query = "SELECT * FROM inventory WHERE id=?"
    result = c.execute(query, (get_id,))
    for r in result:
        get_id = r[0]
        get_name = r[1]
        get_price = r[4]
        get_stock = r[2]
    productname.configure(
        text="Product's Name: " + str(get_name))
    pprice.configure(text="Price: Rs. " + str(get_price))

def remove_item():
    products_list.pop()
    product_price.pop()
    product_quantity.pop()
    product_id.pop()

    for p in products_list:
        tempname.config(text="")

        tempqt.config(text="")

        tempprice.config(text="")
        total_l.configure(text="Total: Rs." + str(sum(product_price)))


def clear_item():
    for a in labels_list:
        a.destroy()
    del (products_list[:])
    del (product_id[:])
    del (product_quantity[:])
    del (product_price[:])
    c_amount.configure(text="")
    total_l.configure(text="")
    change_e.delete(0, END)
    enteride.focus()









def add_to_cart():
    # get the quantity value and from the database
    quantity_value = int(quantity_e.get())
    if quantity_value > int(get_stock):
        tkinter.messagebox.showinfo(
            "Error", "Not that many products in our inventory.")
    else:
        # calculate the price
        global product_id
        global products_list
        global product_price
        global product_quantity
        global counter
        final_price = (float(quantity_value) * float(get_price)
                       ) - (float(discount_e.get()))
        products_list.append(get_name)
        product_price.append(final_price)
        product_quantity.append(quantity_value)
        product_id.append(get_id)
        x_index = 0
        y_index = 100
        counter = 0
        for p in products_list:
            global tempname
            global tempqt
            global tempprice
            global total_l
            global labels_list
            tempname = Label(right, text=str(products_list[counter]), font=(
                'arial 18 bold'), bg='orange', fg='white')
            tempname.place(x=0, y=y_index)
            labels_list.append(tempname)
            tempqt = Label(right, text=str(product_quantity[counter]), font=(
                'arial 18 bold'), bg='orange', fg='white')
            tempqt.place(x=300, y=y_index)
            labels_list.append(tempqt)
            tempprice = Label(right, text=str(
                product_price[counter]), font=('arial 18 bold'), bg='orange', fg='white')
            tempprice.place(x=500, y=y_index)
            labels_list.append(tempprice)
            y_index += 40
            counter += 1
            # total configure
            total_l.configure(
                text="Total: Rs." + str(sum(product_price)))

            # delete
            # discount_e.delete(0, END)
            # quantity_e.delete(0, END)
            productname.configure(text="")
            pprice.configure(text="")

            # autofocus to the enter id
            # Removes all the previous entries
            enteride.focus()
            enteride.delete(0, END)


def generate_bill():
    # create the bill before updating to the database.
    currentDirectory = os.getcwd()
    directory = currentDirectory + "\\Bills\\" + str(date) + "\\"
    if not os.path.exists(directory):
        os.makedirs(directory)
    # TEMPLATES FOR THE BILL
    company = "\t\t\t\tKJ Somaiya Pvt. Ltd.\n"
    address = "\t\t\t\tMumbai, India\n"
    phone = "\t\t\t\t\t998898989998\n"
    sample = "\t\t\t\t\tInvoice\n"
    dt = "\t\t\t\t\t" + str(date)

    tresult = c.execute("SELECT Max(id) from transactions")
    for r in tresult:
        tid = r[0]
    bill_num = "\n\n\t\t\t" + "Bill number : " + str(tid)

    table_header = "\n\n\t\t\t---------------------------------------\n\t\t\tSN.\tProducts\t\tQty\t\tAmount\n\t\t\t---------------------------------------"
    final = company + address + phone + sample + dt + "\n" + table_header

    # open a file to write it to
    file_name = str(directory) + \
                str(tid) + ".rtf"
    f = open(file_name, 'w')
    f.write(final)



    # fill dynamics
    r = 1
    i = 0
    for t in products_list:
        f.write("\n\t\t\t" + str(r) + "\t" + str(products_list[i] + ".......")[
                                             :7] + "\t\t" + str(product_quantity[i]) + "\t\t" + str(product_price[i]))
        i += 1
        r += 1
    f.write("\n\n\t\t\tTotal: Rs. " + str(sum(product_price)))
    f.write("\n\t\t\tThanks for Visiting.")
    os.startfile(file_name, "print")

    f.close()
    # decrease the stock
    for i in range(len(products_list)):
        my_list.insert(0,str(tid))
    n = [my_list, product_id, products_list, product_quantity, product_price]
    res = [list(x) for x in zip(*n)]
    for i in res:
        print(i)
    with open("C:\\Users\\Tejaswini\\Downloads\\shop ms\\final1.csv", 'a') as f1:
        writer = csv.writer(f1)
        for i in res:
            writer.writerow(i)

    def remove_empty_rows(input_file, output_file):
        with open(input_file, 'r', newline='') as infile:
            reader = csv.reader(infile)
            rows = [row for row in reader if any(field.strip() for field in row)]

        with open(output_file, 'a', newline='') as outfile:
            writer = csv.writer(outfile)
            writer.writerows(rows)

        # Usage example:

    input_file = "C:\\Users\\Tejaswini\\Downloads\\shop ms\\final1.csv"
    output_file = 'C:\\Users\\Tejaswini\\Downloads\\shop ms\\final2.csv'
    remove_empty_rows(input_file, output_file)



    x = 0
    initial = "SELECT * FROM inventory WHERE id=?"
    result = c.execute(initial, (product_id[x],))
    for i in products_list:
        for r in result:
            old_stock = r[2]
        new_stock = int(old_stock) - \
                    int(product_quantity[x])
        # updating the stock
        sql = "UPDATE inventory SET stock=? WHERE id=?"
        c.execute(sql, (new_stock, product_id[x]))
        conn.commit()
        # insert into the transaction
        sql2 = "INSERT INTO transactions (product_name, quantity, amount, date) VALUES (?, ?, ?, ?)"
        c.execute(
            sql2, (products_list[x], product_quantity[x], product_price[x], date))
        conn.commit()
        x += 1
    for a in labels_list:
        a.destroy()
    del (products_list[:])
    del (product_id[:])
    del (product_quantity[:])
    del (product_price[:])
    c_amount.configure(text="")
    total_l.configure(text="")
    change_e.delete(0, END)
    enteride.focus()
    tkinter.messagebox.showinfo("Success", "Bill has been generated")


# frame1
left = Frame(frame1, width=700, height=768, bg='floral white')
left.pack(side=LEFT)
right = Frame(frame1, width=666, height=768, bg='orange')
right.pack(side=RIGHT)
# components
heading = Label(left, text="KJ Mart", font=(
    'arial 40 bold'), bg='floral white')
heading.place(x=0, y=0)
date_label = Label(right, text="Today's Date: " +
                               str(date), font=('arial 16 bold'), bg='orange', fg='white')
date_label.place(x=0, y=0)

# table invoice==============================================================
tproduct = Label(right, text="Products", font=(
    'arial 16 bold'), bg='orange', fg='white')
tproduct.place(x=0, y=60)
tquantity = Label(right, text="Quantity", font=(
    'arial 16 bold'), bg='orange', fg='white')
tquantity.place(x=280, y=60)
tamount = Label(right, text="Amount", font=(
    'arial 16 bold'), bg='orange', fg='white')
tamount.place(x=480, y=60)
# enter stuff
enterid = Label(left, text="Enter Product's ID", font=(
    'arial 18 bold'), bg='floral white')
enterid.place(x=0, y=80)
enteride = Entry(left, width=12, font=(
    'arial 18 bold'), bg='orange')
enteride.place(x=230, y=80)
enteride.focus()
# button
search_btn = Button(
    left, text="Search", font=('arial 10 bold'), width=15, height=1, bg='green', fg="white", activebackground='white',
    activeforeground='black', command=ajax)
search_btn.place(x=400, y=80)
# fill it later by the function ajax
productname = Label(left, text="", font=(
    'arial 27 bold'), bg='floral white', fg='steelblue')
productname.place(x=0, y=250)
pprice = Label(left, text="", font=(
    'arial 27 bold'), bg='floral white', fg='steelblue')
pprice.place(x=0, y=290)
# total label
total_l = Label(right, text="", font=(
    'arial 40 bold'), bg='orange', fg='white')
total_l.place(x=0, y=600)
frame1.bind("<Return>", ajax)
frame1.bind("<Up>", add_to_cart)
frame1.bind("<space>", generate_bill)
Prod_List = Label(frame1, text="Product list : ",
                  font=('arial 16 bold'), bg='floral white')
Prod_List.place(x=90, y=120)
# Combobox creation
n = StringVar()
ProductList = ttk.Combobox(frame1, width=18, textvariable=n)
c.execute("SELECT id, name from inventory")
tuples = c.fetchall()
product_tuple = [i for i in tuples]
products = ["Product List"]
for i, p in product_tuple:
    product = str(i) + "   " + str(p)
    products.append(product)
# Adding combobox drop down list
ProductList['values'] = products
ProductList.place(x=250, y=125)
ProductList.current(0)
# create the quantity and the discount label
quantity_l = Label(left, text="Enter Quantity", font=(
    'arial 18 bold'), bg='floral white')
quantity_l.place(x=0, y=370)
quantity_e = Entry(left, width=25,
                   font=('arial 18 bold'), bg='orange')
quantity_e.place(x=190, y=370)
quantity_e.focus()
# discount
discount_l = Label(left, text="Enter Discount", font=(
    'arial 18 bold'), bg='floral white')
discount_l.place(x=0, y=410)
discount_e = Entry(left, width=25,
                   font=('arial 18 bold'), bg='orange')
discount_e.place(x=190, y=410)
discount_e.insert(END, 0)
# add to cart button
add_to_cart_btn = Button(
    left, text="Add To Cart", width=22, height=2, bg='green', fg="white", activebackground='white',
    activeforeground='black', command=add_to_cart)
add_to_cart_btn.place(x=350, y=450)
# generate bill and change
change_l = Label(left, text="Given Amount", font=(
    'arial 18 bold'), bg='floral white')
change_l.place(x=0, y=550)
change_e = Entry(left, width=25, font=(
    'arial 18 bold'), bg='orange')
change_e.place(x=200, y=550)
# button change
change_btn = Button(left, text="Calculate Change",
                    width=22, height=2, bg='green', fg="white", activebackground='white', activeforeground='black',
                    command=change_func)
change_btn.place(x=360, y=590)
# generate bill button
bill_btn = Button(left, text="Generate Bill", width=100,
                  height=2, bg='red', fg='white', command=generate_bill)
bill_btn.place(x=0, y=640)
c_amount = Label(left, text="",
                 font=('arial 18 bold'), fg='red', bg='floral white')
get_stock = 0
get_name = 0
get_id = 0
get_price = 0


logout_btn1 = Button(left, text="Logout",
                     height=2, bg='green', fg='white', command=lambda: show_frame(frame4))
logout_btn1.place(x=300, y=490)
remove_btn = Button(left, text="remove",
                    height=2, bg='green', fg='white', command=remove_item)
remove_btn.place(x=400, y=490)
clear_btn = Button(left, text="clear",
                    height=2, bg='green', fg='white',command=clear_item)
clear_btn.place(x=500, y=490)

# --------------------------------------------Add to database----------------------------------------
# functions in frame 2
def isnumber(num_string):
    if re.match(r'^(\+91[\-\s]?)?[0]?(91)?[789]\d{9,10}$', num_string):
        return True
    return False


def get_items():
    # get from entries
    global cp2_e, sp2_e
    vendor_phone = vendor_phone_e.get()
    if isnumber(vendor_phone):
        name = name2_e.get()
        stock = stock2_e.get()
        cp = cp2_e.get()
        sp = sp2_e.get()
        vendor = vendor_e.get()
        # dynamic entries
        totalcp = int(cp) * int(stock)
        totalsp = int(sp) * int(stock)
        assumed_profit = int(totalsp - totalcp)
        if name == '' or stock == '' or cp == '' or sp == '':
            tkinter.messagebox.showinfo(
                "Error", "Please Fill all the entries.")
        else:
            sql = "INSERT INTO inventory (name, stock, cp, sp, totalcp, totalsp, assumed_profit, vendor, vendor_phoneno ) VALUES(?,?,?,?,?,?,?,?,?)"
            c.execute(sql, (name, stock, cp, sp, totalcp, totalsp,
                            assumed_profit, vendor, vendor_phone))
            conn.commit()
            result = c.execute("SELECT Max(id) from inventory")
            for r in result:
                id = r[0]
            tBox2.config(text="")
            tBox3.config(text="")
            # textbox insert
            tBox2.config(text="ID has reached upto: " + str(id) + "\n\nInserted " + str(name) +
                              " into the database with code " + str(id_e.get()), bg="white")
            tBox3.config(text="ID has reached upto: " + str(id), bg="white")
            tkinter.messagebox.showinfo(
                "Success", "Successfully added to the database")
            n = StringVar()
            ProductList = ttk.Combobox(frame1, width=18, textvariable=n)
            ProductList2 = ttk.Combobox(frame2, width=18, textvariable=n)
            ProductList3 = ttk.Combobox(frame3, width=18, textvariable=n)
            products = []
            c.execute("SELECT id, name from inventory")
            tuples = c.fetchall()
            product_tuple = [i for i in tuples]
            products = ["Product List"]
            for i, p in product_tuple:
                product = str(i) + "   " + str(p)
                products.append(product)
            # Adding combobox drop down list
            ProductList['values'] = products
            ProductList2['values'] = products
            ProductList3['values'] = products
            ProductList3.place(x=200, y=80)
            ProductList3.current(0)
            ProductList2.place(x=240, y=80)
            ProductList2.current(0)
            ProductList.place(x=250, y=125)
            ProductList.current(0)
    else:
        tkinter.messagebox.showinfo("Error", "Invalid phone number")


def clear_all():
    global name2_e, stock2_e, cp2_e, sp2_e, vendor_e, vendor_phone_e
    num = id + 1
    name2_e.delete(0, END)
    stock2_e.delete(0, END)
    cp2_e.delete(0, END)
    sp2_e.delete(0, END)
    vendor_e.delete(0, END)
    vendor_phone_e.delete(0, END)


result = c.execute("SELECT Max(id) from inventory")
for r in result:
    id = r[0]
heading = Label(frame2, text="Add to the database",
                font=('arial 40 bold'), fg='steelblue')
heading.place(x=400, y=0)
# labels  for the window
name_l = Label(frame2, text="Enter Product Name", font=('arial 18 bold'))
name_l.place(x=0, y=70)
stock_l = Label(frame2, text="Enter Stocks", font=('arial 18 bold'))
stock_l.place(x=0, y=120)
cp_l = Label(frame2, text="Enter Cost Price", font=('arial 18 bold'))
cp_l.place(x=0, y=170)
sp_l = Label(frame2, text="Enter Selling Price", font=('arial 18 bold'))
sp_l.place(x=0, y=220)
vendor_l = Label(frame2, text="Enter Vendor Name", font=('arial 18 bold'))
vendor_l.place(x=0, y=270)
vendor_phone_l = Label(
    frame2, text="Enter Vendor Phone Number", font=('arial 18 bold'))
vendor_phone_l.place(x=0, y=320)
id_l = Label(frame2, text="Enter Vendor ID", font=('arial 18 bold'))
id_l.place(x=0, y=370)
# entries for the labels
name2_e = Entry(frame2, width=25, font=('arial 18 bold'))
name2_e.place(x=380, y=70)
stock2_e = Entry(frame2, width=25, font=('arial 18 bold'))
stock2_e.place(x=380, y=120)
cp2_e = Entry(frame2, width=25, font=('arial 18 bold'))
cp2_e.place(x=380, y=170)
sp2_e = Entry(frame2, width=25, font=('arial 18 bold'))
sp2_e.place(x=380, y=220)
vendor_e = Entry(frame2, width=25, font=('arial 18 bold'))
vendor_e.place(x=380, y=270)
vendor_phone_e = Entry(frame2, width=25, font=('arial 18 bold'))
vendor_phone_e.place(x=380, y=320)
id_e = Entry(frame2, width=25, font=('arial 18 bold'))
id_e.place(x=380, y=370)
# button to add to the database
btn_add = Button(frame2, text="Add To Database", width=25,
                 height=2, bg='steelblue', fg='white', command=get_items)
btn_add.place(x=520, y=420)
btn_clear = Button(frame2, text="Clear All Fields", width=18,
                   height=2, bg='lightgreen', fg='white', command=clear_all)
btn_clear.place(x=350, y=420)
# text box for the logs
tBox2 = Label(frame2, width=60, height=18, font=('arial 12 bold'))
tBox2.place(x=750, y=70)
tBox2.config(text="ID has reached upto: " + str(id), bg="white")
frame2.bind('<Return>', get_items)
frame2.bind('<Up>', clear_all)
# Combobox creation
n = StringVar()
ProductList3 = ttk.Combobox(frame2, width=18, textvariable=n)
products = []
c.execute("SELECT id, name from inventory")
tuples = c.fetchall()
product_tuple = []
for i in tuples:
    product_tuple.append(i)
products = ["Product List"]
for i, p in product_tuple:
    product = str(i) + "   " + str(p)
    products.append(product)
# Adding combobox drop down list
ProductList3['values'] = products
ProductList3.place(x=240, y=80)
ProductList3.current(0)
home_btn = Button(frame2, text="Home",
                  height=2, bg='green', fg='white', command=lambda: show_frame(frame11))
home_btn.place(x=30, y=490)

logout_btn2 = Button(frame2, text="Logout",
                     height=2, bg='green', fg='white', command=lambda: show_frame(frame4))
logout_btn2.place(x=300, y=490)


# --------------------------------------------Update database----------------------------------------
# frame 3 functions
def search():
    sql = "SELECT * FROM inventory WHERE id=?"
    result = c.execute(sql, (id_leb.get(),))
    n1 = None  # name
    n2 = None  # stock
    n3 = None  # cp
    n4 = None  # sp
    n5 = None  # totalcp
    n6 = None  # totalsp
    n7 = None  # assumed_profit
    n8 = None  # vendor
    n9 = None  # vendor_phone
    for r in result:
        n1 = r[1]  # name
        n2 = r[2]  # stock
        n3 = r[3]  # cp
        n4 = r[4]  # sp
        n5 = r[5]  # totalcp
        n6 = r[6]  # totalsp
        n7 = r[7]  # assumed_profit
        n8 = r[8]  # vendor
        n9 = r[9]  # vendor_phone
    conn.commit()
    # insert into the entries to update
    name3_e.delete(0, END)
    name3_e.insert(0, str(n1))
    stock3_e.delete(0, END)
    stock3_e.insert(0, str(n2))
    cp3_e.delete(0, END)
    cp3_e.insert(0, str(n3))
    sp3_e.delete(0, END)
    sp3_e.insert(0, str(n4))
    vendor3_e.delete(0, END)
    vendor3_e.insert(0, str(n8))
    vendor_phone3_e.delete(0, END)
    vendor_phone3_e.insert(0, str(n9))
    totalcp_e.delete(0, END)
    totalcp_e.insert(0, str(n5))
    totalsp_e.delete(0, END)
    totalsp_e.insert(0, str(n6))


def update():
    u8 = vendor_phone3_e.get()
    if isnumber(u8):
        # get all the updated values
        u1 = name3_e.get()
        u2 = stock3_e.get()
        u3 = cp3_e.get()
        u4 = sp3_e.get()
        u5 = totalcp_e.get()
        Mysp = int(totalsp_e.get())
        # u6 = (int(totalcp_e.get()) / int(cp_e.get()) ) * int(sp_e.get())
        u6 = (Mysp / (int(totalcp_e.get()) / int(cp3_e.get()))) * (
                    (int(totalcp_e.get()) / int(cp3_e.get())) - int(stock3_e.get())) + int(sp3_e.get()) * int(
            stock3_e.get())
        u7 = vendor3_e.get()
        query = "UPDATE inventory SET name=?, stock=?, cp=?, sp=?, totalcp=?, totalsp=?, vendor=?, vendor_phoneno=? WHERE id=?"
        c.execute(query, (u1, u2, u3, u4, u5, u6, u7, u8, id_leb.get()))
        conn.commit()
        tkinter.messagebox.showinfo("Success", "Update database Successful")
        n = StringVar()
        ProductList = ttk.Combobox(frame1, width=18, textvariable=n)
        ProductList2 = ttk.Combobox(frame2, width=18, textvariable=n)
        ProductList3 = ttk.Combobox(frame3, width=18, textvariable=n)
        products = []
        c.execute("SELECT id, name from inventory")
        tuples = c.fetchall()
        product_tuple = [i for i in tuples]
        products = ["Product List"]
        for i, p in product_tuple:
            product = str(i) + "   " + str(p)
            products.append(product)
        # Adding combobox drop down list
        ProductList['values'] = products
        ProductList2['values'] = products
        ProductList3['values'] = products
        ProductList3.place(x=200, y=80)
        ProductList3.current(0)
        ProductList2.place(x=240, y=80)
        ProductList2.current(0)
        ProductList.place(x=250, y=125)
        ProductList.current(0)
    else:
        tkinter.messagebox.showinfo("Error", "Invalid phone number")


result = c.execute("SELECT Max(id) from inventory")
for r in result:
    id = r[0]
heading = Label(frame3, text="Update the database",
                font=('arial 40 bold'), fg='steelblue')
heading.place(x=400, y=0)
# label and entry for id
id_le = Label(frame3, text="Enter Id", font=('arial 18 bold'))
id_le.place(x=0, y=70)
id_leb = Entry(frame3, font=('arial 18 bold'), width=10)
id_leb.place(x=380, y=70)
# Combobox creation
n = StringVar()
ProductList = ttk.Combobox(frame3, width=18, textvariable=n)
products = []
c.execute("SELECT id, name from inventory")
tuples = c.fetchall()
product_tuple = []
for i in tuples:
    product_tuple.append(i)
products = ["Product List"]
for i, p in product_tuple:
    product = str(i) + "   " + str(p)
    products.append(product)
# Adding combobox drop down list
ProductList['values'] = products
ProductList.place(x=200, y=80)
ProductList.current(0)
btn_search = Button(frame3, text="Search", width=15,
                    height=2, bg='orange', command=search)
btn_search.place(x=550, y=70)

# labels  for the window
name_l = Label(frame3, text="Enter Product Name", font=('arial 18 bold'))
name_l.place(x=0, y=120)
stock_l = Label(frame3, text="Enter Stocks", font=('arial 18 bold'))
stock_l.place(x=0, y=170)
cp_l = Label(frame3, text="Enter Cost Price", font=('arial 18 bold'))
cp_l.place(x=0, y=220)
sp_l = Label(frame3, text="Enter Selling Price", font=('arial 18 bold'))
sp_l.place(x=0, y=270)
totalcp_l = Label(frame3, text="Enter Total Cost Price",
                  font=('arial 18 bold'))
totalcp_l.place(x=0, y=320)
totalsp_l = Label(frame3, text="Enter Total Selling Price",
                  font=('arial 18 bold'))
totalsp_l.place(x=0, y=370)
vendor_l = Label(frame3, text="Enter Vendor Name", font=('arial 18 bold'))
vendor_l.place(x=0, y=420)
vendor_phone_l = Label(
    frame3, text="Enter Vendor Phone Number", font=('arial 18 bold'))
vendor_phone_l.place(x=0, y=470)
# entries for the labels
name3_e = Entry(frame3, width=25, font=('arial 18 bold'))
name3_e.place(x=380, y=120)
stock3_e = Entry(frame3, width=25, font=('arial 18 bold'))
stock3_e.place(x=380, y=170)
cp3_e = Entry(frame3, width=25, font=('arial 18 bold'))
cp3_e.place(x=380, y=220)
sp3_e = Entry(frame3, width=25, font=('arial 18 bold'))
sp3_e.place(x=380, y=270)
totalcp_e = Entry(frame3, width=25, font=('arial 18 bold'))
totalcp_e.place(x=380, y=320)
totalsp_e = Entry(frame3, width=25, font=('arial 18 bold'))
totalsp_e.place(x=380, y=370)
vendor3_e = Entry(frame3, width=25, font=('arial 18 bold'))
vendor3_e.place(x=380, y=420)
vendor_phone3_e = Entry(frame3, width=25, font=('arial 18 bold'))
vendor_phone3_e.place(x=380, y=470)
# button to add to the database
btn_add = Button(frame3, text="Update Database", width=25,
                 height=2, bg='steelblue', fg='white', command=update)
btn_add.place(x=520, y=520)
# text box for the logs
tBox3 = Label(frame3, width=60, height=18, font=('arial 12 bold'))
tBox3.place(x=750, y=70)
tBox3.config(text="ID has reached upto: " + str(id), bg="white")
home_btn = Button(frame3, text="Home",
                  height=2, bg='green', fg='white', command=lambda: show_frame(frame11))
home_btn.place(x=30, y=490)

logout_btn3 = Button(frame3, text="Logout",
                     height=2, bg='green', fg='white', command=lambda: show_frame(frame4))
logout_btn3.place(x=300, y=490)





home_btn = Button(frame5, text="Home",
                      height=2, bg='green', fg='white', command=lambda: show_frame(frame11))
home_btn.place(x=30, y=690)

logout_btn3 = Button(frame5, text="Logout",
                         height=2, bg='green', fg='white', command=lambda: show_frame(frame4))
logout_btn3.place(x=300, y=690)






#-----------------------------------------frame11 functions-------------------------------------


add_btn = Button(frame11, text="Add products", width=15,
                   height=2, bg='black', fg='white',command=lambda: show_frame(frame2))
add_btn.place(x=640, y=150)
update_btn = Button(frame11, text="Update",width=15,
                    height=2, bg='black', fg='white', command=lambda: show_frame(frame3))
update_btn.place(x=640, y=250)
btn_app = Button(frame11, text="analysis", width=15,
                    height=2, bg='black',fg='white', command=lambda: [show_frame(frame5),analysis(frame)])
btn_app.place(x=640, y=350)
logout_btn3 = Button(frame11, text="Logout",width=15,
                         height=2, bg='black', fg='white', command=lambda: show_frame(frame4))
logout_btn3.place(x=640, y=450)
bar_btn = Button(frame11, text="bar chart",width=15,
                         height=2, bg='black', fg='white', command=lambda: [show_frame(frame6),bar(frame)])
bar_btn.place(x=640, y=550)
log_btn = Button(frame11, text="change",width=15,
                         height=2, bg='black', fg='white', command=lambda: show_frame(frame7))
log_btn.place(x=640, y=650)
log1_btn = Button(frame11, text="change 1",width=15,
                         height=2, bg='black', fg='white', command=lambda: show_frame(frame8))
log1_btn.place(x=440, y=650)


# --------------------------------------------frame7----------------------------------------
# frame 7functions

canvas = Canvas(frame7, width=725, height=384)
canvas.place(x=335, y=140)

canvas.create_rectangle(0, 0, 725, 700, fill='orange', outline="white")

heading = Label(frame7, text="KJ Mart",
                font=('arial 52 bold'), fg='white', bg="orange")
heading.place(x=550, y=50)

heading = Label(frame7, text="enter new username and password",
                font=('arial 30 bold'), fg='white', bg="orange")
heading.place(x=370, y=150)


Uname2_l = Label(frame7, text="Username :", font=(
    'arial 18 bold'), fg='white', bg="orange")
Uname2_l.place(x=500, y=250)

Uname2_e = Entry(frame7, width=25, font=('arial 18 bold'))
Uname2_e.place(x=683, y=250)

Passwd2_l = Label(frame7, text="Password :", font=(
    'arial 18 bold'), fg='white', bg="orange")
Passwd2_l.place(x=500, y=300)

Passwd2_e = Entry(frame7, show='*', width=25, font=('arial 18 bold'))
Passwd2_e.place(x=683, y=300)
Passwd5_l = Label(frame7, text="Password must be minimum of 8 characters long and should start with a\n capital letter and contain numbers and a special character", font=(
    'arial 10 bold'), fg='black',width=80, bg="orange")
Passwd5_l.place(x=400, y=350)

Login8_btn = Button(frame7, text="change", font=(
    'arial 20'), width=7,
                   height=1, bg='orange', fg='white',command=lambda: ownpas(Uname2_e.get(), Passwd2_e.get()))
Login8_btn.place(x=660, y=450)
close_button = Button(frame7, text="close", font=('arial 20'), width=7,
                   height=1, bg='orange', fg='white', command=lambda: show_frame(frame11))
close_button.place(x=660,y=600)






# --------------------------------------------frame8----------------------------------------
# frame 8functions

canvas = Canvas(frame8, width=725, height=384)
canvas.place(x=335, y=140)

canvas.create_rectangle(0, 0, 725, 700, fill='orange', outline="white")

heading = Label(frame8, text="KJ Mart",
                font=('arial 52 bold'), fg='white', bg="orange")
heading.place(x=550, y=50)

heading = Label(frame8, text="enter new username and password",
                font=('arial 30 bold'), fg='white', bg="orange")
heading.place(x=370, y=150)



Uname3_l = Label(frame8, text="Username :", font=(
    'arial 18 bold'), fg='white', bg="orange")
Uname3_l.place(x=500, y=250)

Uname3_e = Entry(frame8, width=25, font=('arial 18 bold'))
Uname3_e.place(x=683, y=250)

Passwd3_l = Label(frame8, text="Password :", font=(
    'arial 18 bold'), fg='white', bg="orange")
Passwd3_l.place(x=500, y=300)

Passwd3_e = Entry(frame8, show='*', width=25, font=('arial 18 bold'))
Passwd3_e.place(x=683, y=300)
Passwd4_l = Label(frame8, text="Password must be minimum of 8 characters long and should start with a\n capital letter and contain numbers and a special character", font=(
    'arial 10 bold'), fg='black',width=80, bg="orange")
Passwd4_l.place(x=400, y=350)

Login8_btn = Button(frame8, text="change", font=(
    'arial 20'), width=7,
                   height=1, bg='orange', fg='white',command=lambda: emppas(Uname3_e.get(), Passwd3_e.get()))
Login8_btn.place(x=660, y=450)
close_button = Button(frame8, text="close", font=('arial 20'), width=7,
                   height=1, bg='orange', fg='white', command=lambda: show_frame(frame11))
close_button.place(x=660,y=600)






# --------------------------------------------Login----------------------------------------
# frame 4 functions




def own_login(U1name, Passwd1):
    with open("C:\\Users\\Tejaswini\\Downloads\\o1.txt",'r') as f1:
        user1=f1.read()
    with open("C:\\Users\\Tejaswini\\Downloads\\o2.txt",'r') as f2:
        pass1=f2.read()

    if U1name == user1 and Passwd1 == pass1:
        show_frame(frame11)
        U1name_e.delete(0, END)
        Passwd1_e.delete(0, END)
    else:
        tkinter.messagebox.showinfo(
            "Error", "Incorrect login Credentials")

def auth_login(Uname, Passwd):
    with open("C:\\Users\\Tejaswini\\Downloads\\e1.txt", 'r') as f3:
        user = f3.read()
    with open("C:\\Users\\Tejaswini\\Downloads\\e2.txt", 'r') as f4:
        passw = f4.read()
    if Uname == user and Passwd == passw:
        show_frame(frame1)
        Uname_e.delete(0, END)
        Passwd_e.delete(0, END)
    else:
        tkinter.messagebox.showinfo(
            "Error", "Incorrect login Credentials")


canvas = Canvas(frame4, width=725, height=384)
canvas.place(x=335, y=140)
canvas.create_rectangle(0, 0, 725, 700, fill='orange', outline="white")
heading = Label(frame4, text="KJ Mart",
                font=('arial 52 bold'), fg='white', bg="orange")
heading.place(x=550, y=50)
heading = Label(frame4, text="Employee ",
                font=('arial 40 bold'), fg='white', bg="orange")
heading.place(x=400, y=200)
heading = Label(frame4, text="Owner ",
                font=('arial 40 bold'), fg='white', bg="orange")
heading.place(x=770, y=200)


Uname_l = Label(frame4, text="Username :", font=(
    'arial 15 bold'), fg='white', bg="orange")
Uname_l.place(x=350, y=300)
Uname_e = Entry(frame4, width=15, font=('arial 15 bold'))
Uname_e.place(x=483, y=300)
Passwd_l = Label(frame4, text="Password :", font=(
    'arial 15 bold'), fg='white', bg="orange")
Passwd_l.place(x=350, y=350)
Passwd_e = Entry(frame4, show='*', width=15, font=('arial 15 bold'))
Passwd_e.place(x=483, y=350)
Login_btn = Button(frame4, text="Login", font=(
    'arial 20'), width=7,
                   height=1, bg='orange', fg='white', command=lambda: auth_login(Uname_e.get(), Passwd_e.get()))
Login_btn.place(x=430, y=440)


U1name_l = Label(frame4, text="Username :", font=(
    'arial 15 bold'), fg='white', bg="orange")
U1name_l.place(x=740, y=300)
U1name_e = Entry(frame4, width=15, font=('arial 15 bold'))
U1name_e.place(x=873, y=300)
Passwd1_l = Label(frame4, text="Password :", font=(
    'arial 15 bold'), fg='white', bg="orange")
Passwd1_l.place(x=740, y=350)
Passwd1_e = Entry(frame4, show='*', width=15, font=('arial 15 bold'))
Passwd1_e.place(x=873, y=350)
Login1_btn = Button(frame4, text="Login", font=(
    'arial 20'), width=7,
                   height=1, bg='orange', fg='white', command=lambda: own_login(U1name_e.get(), Passwd1_e.get()))
Login1_btn.place(x=820, y=440)


show_frame(frame4)
root.mainloop()